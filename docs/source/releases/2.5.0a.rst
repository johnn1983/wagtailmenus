=================================
Wagtailmenus 2.5.0a release notes
=================================

.. NOTE::
    This version is still under development

.. contents::
    :local:
    :depth: 1


What's new?
===========


Hooks added to give developers more options for manipulating menus 
------------------------------------------------------------------

While wagtailmenus has long supported the use of custom classes for most things (allowing developers to override methods as they see fit), for a long time, I've felt that it should be easier to override some core/shared behaviour without the technical overhead of having to create and maintain multiple custom models and classes. So, wagtailmenus now supports several 'hooks', which allow you to do just that.

They use the hooks mechanism from Wagtail, so you may already be familiar with the concept. For more information and examples, see the new section of the documentation: :ref:`hooks`.


New 'autopopulate_main_menus' command added
-------------------------------------------

The 'autopopulate_main_menus' command has been introduced to help developers integrate wagtailmenus into an existing project, by removing some of the effort that is often needed to populating main menu for each project from scratch. It's been introduced as an extra (optional) step to the instruction in: :ref:`installing_wagtailmenus`.

Utilises the new ``add_menu_items_for_pages()`` method, mentioned below.


New 'add_menu_items_for_pages()' method added for main & flat menus
-------------------------------------------------------------------

For each page in the provided ``PageQuerySet`` a menu item will be added to the menu, linking to that page. The method has was added to the ``MenuWithMenuItems`` model class, which is subclassed by ``AbstractMainMenu`` and ``AbstractFlatMenu``, which means you should be able to use it on custom menu model objects, as well as object using the default models.


Overriding 'get_base_page_queryset()' now effects top-level menu items too 
--------------------------------------------------------------------------

Previously, if you overrode get_base_page_queryset() on a custom main menu or flat menu model, the page-tree driven part of the menu (anything below the top-level) would respect that, but top-level menu items linking to pages excluded by get_base_page_queryset() would still be rendered.

Now, 'top_level_items' has been refactored to call get_base_page_queryset() to filter down and return page data for items at the top level too, so developers can always expect changes to get_base_page_queryset() to be reflected throughout entire menus.


'MenuItemManager.for_display()' now returns all items, regardless of the status of linked pages
-----------------------------------------------------------------------------------------------

When sourcing data for a main or flat menu, it doesn't make sense to apply two sets of filters relating to pages status/visibility, so 'for_display' now simply returns ALL menu items defined for a menu, and any unsuitable page links are filtered out in a menu instances 'top_level_items' by calling upon 'get_base_page_queryset'.


Minor changes & bug fixes 
=========================

*   Fixed an issue with runtests.py that was causing tox builds in Travis CI
    to report as successful, even when tests were failing. Contributed by
    Oliver Bestwalter (obestwalter).
*   Updated signature of ``menu_tags.get_sub_menu_items_for_page()`` to improve
    code readability (see below for more details).
*   Updated signature of ``menu_tags.prime_menu_items()`` to improve code
    readability and consistency, and to support additional arguments required
    for new hooks functionality (see below for more details).
*   The ``stop_at_this_level`` argument for the ``sub_menu`` tag has been
    officially deprecated and the feature removed from documentation. It hasn't 
    worked for a few versions and nobody has mentioned it, so this is the first
    step to removing it completely.
*   Reduced code bloat in various methods in ``menu_tags.py`` by defining
    common dictionaries of keyword arguments that can be easily passed to
    different methods.
*   Made the logic in 'pages_for_display' easier to override on custom menu
    classes by breaking it out into a separate 'get_pages_for_display()'
    method (that isn't decorated with ``cached_property``).
*   Added support for Wagtail 1.12


Upgrade considerations
======================


If you're overriding 'get_base_menuitem_queryset()' or calling it from elsewhere
--------------------------------------------------------------------------------

By default, the queryset returned by 'get_base_menuitem_queryset' on menu instances will now return ALL menu items defined for that menu, regardless of the status / visibility of any linked pages. 

Previously, the result was filtered to only include pages with 'live' status, and with a True 'show_in_menus' value.

If you're calling 'get_base_menuitem_queryset' anywhere in your codebase, and are relying on the original method to return the same value as it did before, you will need to apply the additional filters to the queryset, like so:


.. code-block:: python
    
    from django.db.models import Q

    ...

    menu_item_qs = menu.get_base_menuitem_queryset()
    menu_item_qs = menu_item_qs.filter(
        Q(link_page__isnull=True) |
        Q(link_page__live=True) &
        Q(link_page__expired=False) &
        Q(link_page__show_in_menus=True)
    )


If you're overriding 'MenuItemManager.for_display()'
----------------------------------------------------

If you are subclasssing ``MenuItemManger`` to create managers for your custom menu item models, and are relying on the original 'for_display' method to filter out certain links based on linked page's status/visibility, you may wish to revise your code to filter out the pages as before. However, you may find that you don't need to worry about this, as the 'get_base_page_queryset' method on menu instances should filter out the same pages when page data is fetched to attach to menu items.

However, if you really do need 'for_display()' to return the same results as it did before, you should update the 'for_display' method on your custom manager class to apply additional filters, like so:


.. code-block:: python
    
    from django.db.models import Q
    from wagtailmenus.managers import MenuItemManager

    ...

    class CustomMenuItemManager(MenuItemManager):

        def for_display(self):
            qs = super(CustomMenuItemManager, self).for_display()
            qs = qs.filter(
                Q(link_page__isnull=True) |
                Q(link_page__live=True) &
                Q(link_page__expired=False) &
                Q(link_page__show_in_menus=True)
            )
            # Now apply any custom filters
            ...
            # Return queryset
            return qs


If you're calling ``menu_tags.prime_menu_items()`` directly anywhere 
--------------------------------------------------------------------

This method is only intended for use by the other methods in ``menu_tags.py``, and shouldn't be used elsewhere. But, if you are calling it directly, it's likely that you will have to update your code to match the methods updated signature.

The method now accepts three new required arguments:

* ``parent_page``: If the calling tag is rendering a sub-menu for children of a given page, you should pass that page object here. Pass ``None`` if no parent page is involved (for example, if rendering the top level of a main or flat menu, where the menu items are defined on each menu)
* ``current_level``: An integer indicating the 'level' or 'depth' that is currently being rendered in the process of rendering a multi-level menu.
* ``max_levels``: An integer indicatiing the maxiumum number of levels that should be rendered for the current menu.

The ``check_for_children`` argument is no longer accepted.

The ``current_page_ancestor_ids`` argument has been renamed to ``curren_ancestor_ids``.

The position of arguments has changed considerably too. If calling the method using positional arguments, you should examine the code to ensure you're passing arguments in the correct order.


If you're calling ``menu_tags.get_sub_menu_items_for_page()`` directly anywhere
-------------------------------------------------------------------------------

This method is only intended for use by the other methods in ``menu_tags.py``, and shouldn't be used elsewhere. But, if you are calling it directly, it's likely that you will have to update your code to match the methods updated signature.

The following arguments are now required instead of optional:

* ``original_menu_tag``: The name of the tag that was called to initiate rendering of the menu that is currently being rendered. For example, if you're using the ``main_menu`` tag to render a multi-level menu, even though ``sub_menu`` may be called to render subsequent additional levels, 'original_menu_tag' should retain the value ``'main_menu'``.
* ``current_level``: An integer indicating the 'level' or 'depth' that is currently being rendered in the process of rendering a multi-level menu.
* ``max_levels``: An integer indicatiing the maxiumum number of levels that should be rendered for the current menu.

The ``ancestor_ids`` argument has been renamed to ``curren_ancestor_ids``.

The position of arguments has changed considerably too. If calling the method using positional arguments, you should examine the code to ensure you're passing arguments in the correct order.
