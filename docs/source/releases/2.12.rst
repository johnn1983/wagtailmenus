=======================================
Wagtailmenus 2.12 (alpha) release notes
=======================================

.. NOTE ::
    
    Wagtailmenus 2.12 is in the alpha stage of development. Any changes
    detailed below are subject to change before the final 2.12 release.


.. contents::
    :local:
    :depth: 1


What's new?
===========

TBA


Minor changes & bug fixes 
=========================

- Arabic translations added - Courtesy of @alfuhigi. Many thanks!
- Fixed an issue with the section menu in the release notes section of the docs.
- Updated tox config to test against Python 3.7 and Wagtail 2.2
- Updated Travis CI config to deploy to PyPi automatically when commits are tagged appropriately.
- Pinned django-cogwheels dependency to version 0.2 to reduce potential for backwards-incompatibility issues.
- Changed the signature of ``Menu.render_from_tag()`` to better indicate common expected/supported arguments for menus.
- Added a custom ``render_from_tag()`` method for each individual menu class, with a signature that highlights all relevant options, including those specific to that menu type.
- Renamed ``Menu.get_contextual_vals_from_context()`` to ``Menu._create_contextualvals_obj_from_context()`` to give a better
indication of what the method does.
- Renamed ``Menu.get_option_vals_from_options`` to ``Menu._create_optionvals_obj_from_values()`` to give a better indication of what the method does.


Deprecations
============

The following items have been deprecated in this release. They will continue to be supported for a standard deprecation period of two minor releases, but will be removed in version 3.0.


``Menu.get_instance_for_rendering()`` is deprecated
---------------------------------------------------

In an effort to make method names more reflective of their functionality, this method has been replaced by two methods:
``create_from_collected_values()`` and ``get_from_collected_values``. The former is implemented on menu classes that are  not model based (where an instance must be created from scratch each time, for example: ``ChildrenMenu``, ``SectionMenu``, ``SubMenu``), and the latter is implemented on model-based menu classes, where a corresponding object must be retreived from the database (so, ``AbstractMainMenu``, ``MainMenu``, ``AbstractFlatMenu`` and ``FlatMenu``). 

``render_from_tag()`` automatically calls one or the other, depending on whether the class inherits from ``django.db.models.Model``.


Upgrade considerations
======================

Following a standard deprecation period a two minor releases, the following functionality has now been removed.


The WAGTAILMENUS_CHILDREN_MENU_CLASS_PATH setting is no longer supported
------------------------------------------------------------------------

If you're using this to override the menu class used to render children menus in your project, you'll need to update your Django settings to use the new, shorter setting name: WAGTAILMENUS_CHILDREN_MENU_CLASS.

For example, if you had the following:

.. code-block:: python

    # settings/base.py

    WAGTAILMENUS_CHILDREN_MENU_CLASS_PATH = 'project.menus.CustomChildrenMenu'

You would change this to:

.. code-block:: python

    WAGTAILMENUS_CHILDREN_MENU_CLASS = 'project.menus.CustomChildrenMenu'


The WAGTAILMENUS_SECTION_MENU_CLASS_PATH setting is no longer supported
-----------------------------------------------------------------------

If you're using this to override the menu class used to render section menus in your project, you'll need to update your Django settings to use the new, shorter setting name: WAGTAILMENUS_SECTION_MENU_CLASS.

For example, if you had the following:

.. code-block:: python

    # settings/base.py

    WAGTAILMENUS_SECTION_MENU_CLASS_PATH = 'project.menus.CustomSectionMenu'

You would change this to:

.. code-block:: python

    WAGTAILMENUS_SECTION_MENU_CLASS = 'project.app.module.CustomSectionMenu'


The ``wagtailmenus.app_settings`` module has been removed
---------------------------------------------------------

If you're importing this in your project from it's previous location, you should update the import statements in your code to use the new module path: ``wagtailmenus.conf.settings``

For example, instead of the following:

.. code-block:: python

    from wagtailmenus import app_settings

You should do:

.. code-block:: python

    from wagtailmenus.conf import settings


The ``wagtailmenus.constants`` module has been removed
------------------------------------------------------

If you're importing this in your project from it's previous location, you should update the import statements in your code to use the new module path: `` wagtailmenus.conf.constants``

For example, instead of the following:

.. code-block:: python

    from wagtailmenus import constants

You should do:

.. code-block:: python

    from wagtailmenus.conf import constants
