=================================
Wagtailmenus 2.6.0 release notes
=================================

.. contents::
    :local:
    :depth: 1


What's new?
===========


New tabbed interface for menu editing
-------------------------------------

In an effort to improve the menu editing UI, Wagtail's tabbed interface is now used to split a menu's fields into two tabs: **Content** and **Settings**, with the latter including panels for the ``max_levels`` and ``use_specific`` fields (which were previously tucked away at the bottom of the page), and the former including the rest.

Two new attributes, ``content_panels`` and ``settings_panels`` have also been added to ``AbstractMainMenu`` and ``AbstractFlatMenu`` to allow the panels for each tab to be controlled independently.

If for any reason you don't wish to use the tabbed interface for editing custom menu models, the ``panels`` attribute is still supported, and will result in all fields appearing in a single list (as before). However, the ``panels`` attribute currently present on the ``AbstractFlatMenu`` and ``AbstractMainMenu`` models is now deprecated and will be removed in the future (see below for more info).


Built-in compatibility with ``wagtail-condensedinlinepanel``
------------------------------------------------------------

In an effort to improve the menu editing UI, wagtailmenus now has baked-in compatibility with ``wagtail-condensedinlinepanel``. As long as a compatible version (at least `0.3`) of the app is installed, wagtailmenus will automatically use ``CondensedInlinePanel`` instead of Wagtail's built-in ``InlinePanel`` for listing menu items, giving menu editors some excellent additional features, including drag-and-drop reordering and the ability to add a new item into any position.

See the updated installation docs to find out more:
http://wagtailmenus.readthedocs.io/en/stable/installation.html


Minor changes & bug fixes 
=========================


N/A


Upgrade considerations
======================


``AbstractMainMenu.panels`` and ``AbstractFlatMenu.panels`` attributes are now deprecated
-----------------------------------------------------------------------------------------

If you are referencing ``AbstractMainMenu.panels`` or ``AbstractFlatMenu.panels`` anywhere, you should update your code to reference the ``content_panels`` or ``settings_panels`` attribute instead, depending on which panels you're trying to make use of. 

If you're overriding the ``panels`` attribute on a custom menu model in order to make additional fields available in the editing UI (or change the default field display order), you might also want to think about updating your code to override the ``content_panels`` and ``settings_panels`` attributes instead, which will result in fields being split between two tabs (**Content** and **Settings**). However, this is entirely optional.
